// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array data;
    field int current, max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let data = Array.new(maxLength);
        let current = 0;
        let max = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do data.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return current;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return data[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let data[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let data[current] = c;
        let current = current + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let current = current - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int v, i, d;
        var boolean neg;
        if (charAt(0) = 45) {
            let neg = true;
            let i = i + 1;
        }
        while (i < current) {
            let d = charAt(i) - 48;
            let v = v * 10 + d;
            let i = i + 1;
        }
        if (neg) {
            let v = -v;
        }
        return v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int last;
        let current = 0;
        if (val = 0) {
            do appendChar(48);
            return;
        } 
        if (val < 0) {
            do appendChar(45);
        }
        let val = Math.abs(val);
        do setInternal(val);
        return;
    }

    method void setInternal(int n) {
        var int d, t;
        if (n = 0) {
            return;
        }
        let t = n / 10;
        let d = n - (t * 10);
        do setInternal(t);
        do appendChar(d + 48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
