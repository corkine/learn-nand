// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int x, i;
        let x = 1;
        let i = 16;
        let twoToThe = Array.new(16);
        while (i > 0) { 
            let twoToThe[16-i] = x;
            let x = x * 2;
            let i = i - 1;
        }
        return;
    }

    /** 计算整数 int 的第 j 个比特位的值 */
    function boolean bit(int x, int j) {
        return twoToThe[j] & x > 0;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, j;
        if ((x = 0) | (y = 0)) {
            return 0;
        }
        let x = Math.abs(x);
        let y = Math.abs(y);
        let shiftedX = x;
        while (j < 16) {
            if (Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }
            //不能使用 * 2 导致无限递归
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        if ((x < 0 & y > 0) | (x > 0 & y < 0)) { 
            let sum = -sum;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        let x = Math.abs(x);
        let y = Math.abs(y);
        if (y > x) {
            return 0;
        }
        let q = Math.divide(x,y+y);
        //注意 Jack 没有算数运算优先级
        if ((x-(2*q*y)) < y) {
            if ((x < 0 & y > 0) | (x > 0 & y < 0)) {
                let q = -q;
            }
            return 2 * q;
        } else {
            if ((x < 0 & y > 0) | (x > 0 & y < 0)) {
                let q = -q;
            }
            return 2 * q + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, p;
        let y = 0;
        let j = 7;
        while (j > -1) {
            let p = y + twoToThe[j];
            if (~((p * p) > x)) {
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        var int x;
        let x = a - b;
        if (x > 0) { 
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        var int x;
        let x = a - b;
        if (x < 0) { 
            return a;
        } else {
            return b;
        }
    }
}
