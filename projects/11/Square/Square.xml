<?xml version="1.0" encoding="UTF-8"?><class><keyword>class</keyword><identifier kind="class" type="Square">Square</identifier><symbol>{</symbol><classVarDec><keyword>field</keyword><keyword>int</keyword><identifier kind="field" type="int" index="0">x</identifier><identifier kind="field" type="int" index="1">y</identifier><symbol>;</symbol></classVarDec><classVarDec><keyword>field</keyword><keyword>int</keyword><identifier kind="field" type="int" index="2">size</identifier><symbol>;</symbol></classVarDec><subroutineDec><keyword>constructor</keyword><identifier kind="class" type="Square">Square</identifier><identifier kind="subroutine" type="constructor">new</identifier><symbol>(</symbol><parameterList><keyword>int</keyword><identifier kind="argument" type="int" index="0">Ax</identifier><symbol>,</symbol><keyword>int</keyword><identifier>Ay</identifier><symbol>,</symbol><keyword>int</keyword><identifier>Asize</identifier></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="0" is-using="true">x</identifier><symbol>=</symbol><expression><term><identifier kind="argument" type="int" index="0">Ax</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="1" is-using="true">y</identifier><symbol>=</symbol><expression><term><identifier kind="argument" type="int" index="1">Ay</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="2" is-using="true">size</identifier><symbol>=</symbol><expression><term><identifier kind="argument" type="int" index="2">Asize</identifier></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier kind="subroutine" is-using="true">draw</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><returnStatement><keyword>return</keyword><expression><term><keyword>this</keyword></term></expression><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method">dispose</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Memory</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">deAlloc</identifier><symbol>(</symbol><expressionList><expression><term><keyword kind="argument" type="Square" index="0">this</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" is-using="true" type="method">draw</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setColor</identifier><symbol>(</symbol><expressionList><expression><term><keyword>true</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">drawRectangle</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method">erase</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setColor</identifier><symbol>(</symbol><expressionList><expression><term><keyword>false</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">drawRectangle</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method">incSize</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><symbol>(</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>)</symbol></term><symbol>&lt;</symbol><term><integerConstant>254</integerConstant></term></expression><symbol>)</symbol></term><symbol>&amp;</symbol><term><symbol>(</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>)</symbol></term><symbol>&lt;</symbol><term><integerConstant>510</integerConstant></term></expression><symbol>)</symbol></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="subroutine" type="method" is-using="true">erase</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="2" is-using="true">size</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term><symbol>+</symbol><term><integerConstant>2</integerConstant></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier kind="subroutine" is-using="true" type="method">draw</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></ifStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method">decSize</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term><symbol>&gt;</symbol><term><integerConstant>2</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="subroutine" type="method" is-using="true">erase</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="2" is-using="true">size</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term><symbol>-</symbol><term><integerConstant>2</integerConstant></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier kind="subroutine" is-using="true" type="method">draw</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></ifStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method">moveUp</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>&gt;</symbol><term><integerConstant>1</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setColor</identifier><symbol>(</symbol><expressionList><expression><term><keyword>false</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">drawRectangle</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term></expression><symbol>,</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>)</symbol></term><symbol>-</symbol><term><integerConstant>1</integerConstant></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="1" is-using="true">y</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>-</symbol><term><integerConstant>2</integerConstant></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setColor</identifier><symbol>(</symbol><expressionList><expression><term><keyword>true</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">drawRectangle</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><integerConstant>1</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></ifStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method">moveDown</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>)</symbol></term><symbol>&lt;</symbol><term><integerConstant>254</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setColor</identifier><symbol>(</symbol><expressionList><expression><term><keyword>false</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">drawRectangle</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><integerConstant>1</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="1" is-using="true">y</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><integerConstant>2</integerConstant></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setColor</identifier><symbol>(</symbol><expressionList><expression><term><keyword>true</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">drawRectangle</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term></expression><symbol>,</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>)</symbol></term><symbol>-</symbol><term><integerConstant>1</integerConstant></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></ifStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method">moveLeft</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>&gt;</symbol><term><integerConstant>1</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setColor</identifier><symbol>(</symbol><expressionList><expression><term><keyword>false</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">drawRectangle</identifier><symbol>(</symbol><expressionList><expression><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>)</symbol></term><symbol>-</symbol><term><integerConstant>1</integerConstant></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="0" is-using="true">x</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>-</symbol><term><integerConstant>2</integerConstant></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setColor</identifier><symbol>(</symbol><expressionList><expression><term><keyword>true</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">drawRectangle</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><integerConstant>1</integerConstant></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></ifStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method">moveRight</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>)</symbol></term><symbol>&lt;</symbol><term><integerConstant>510</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setColor</identifier><symbol>(</symbol><expressionList><expression><term><keyword>false</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">drawRectangle</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><integerConstant>1</integerConstant></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="0" is-using="true">x</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><integerConstant>2</integerConstant></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setColor</identifier><symbol>(</symbol><expressionList><expression><term><keyword>true</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">drawRectangle</identifier><symbol>(</symbol><expressionList><expression><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>)</symbol></term><symbol>-</symbol><term><integerConstant>1</integerConstant></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="2" is-using="true">size</identifier></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></ifStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><symbol>}</symbol></class>