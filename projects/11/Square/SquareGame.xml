<?xml version="1.0" encoding="UTF-8"?><class><keyword>class</keyword><identifier kind="class" type="SquareGame">SquareGame</identifier><symbol>{</symbol><classVarDec><keyword>field</keyword><identifier>Square</identifier><identifier kind="field" type="Square" index="0">square</identifier><symbol>;</symbol></classVarDec><classVarDec><keyword>field</keyword><keyword>int</keyword><identifier kind="field" type="int" index="1">direction</identifier><symbol>;</symbol></classVarDec><subroutineDec><keyword>constructor</keyword><identifier kind="class" type="SquareGame">SquareGame</identifier><identifier kind="subroutine" type="constructor" is-using="true">new</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="Square" index="0" is-using="true">square</identifier><symbol>=</symbol><expression><term><identifier kind="class" is-using="true">Square</identifier><symbol>.</symbol><identifier kind="subroutine" type="constructor" is-using="true">new</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>0</integerConstant></term></expression><symbol>,</symbol><expression><term><integerConstant>0</integerConstant></term></expression><symbol>,</symbol><expression><term><integerConstant>30</integerConstant></term></expression></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="1" is-using="true">direction</identifier><symbol>=</symbol><expression><term><integerConstant>0</integerConstant></term></expression><symbol>;</symbol></letStatement><returnStatement><keyword>return</keyword><expression><term><keyword>this</keyword></term></expression><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method" is-using="true">dispose</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="var" type="Square" index="0" is-using="true">square</identifier><symbol>.</symbol><identifier kind="subroutine" type="method" is-using="true">dispose</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Memory</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">deAlloc</identifier><symbol>(</symbol><expressionList><expression><term><keyword>this</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method">moveSquare</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">direction</identifier></term><symbol>=</symbol><term><integerConstant>1</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="var" type="Square" index="0" is-using="true">square</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">moveUp</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></ifStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">direction</identifier></term><symbol>=</symbol><term><integerConstant>2</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="var" type="Square" index="0" is-using="true">square</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">moveDown</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></ifStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">direction</identifier></term><symbol>=</symbol><term><integerConstant>3</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="var" type="Square" index="0" is-using="true">square</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">moveLeft</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></ifStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">direction</identifier></term><symbol>=</symbol><term><integerConstant>4</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="var" type="Square" index="0" is-using="true">square</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">moveRight</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></ifStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Sys</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">wait</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>5</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method">run</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><varDec><keyword>var</keyword><keyword>char</keyword><identifier kind="var" type="char" is-defined="true" index="0">key</identifier><symbol>;</symbol></varDec><varDec><keyword>var</keyword><keyword>boolean</keyword><identifier kind="var" type="boolean" is-defined="true" index="1">exit</identifier><symbol>;</symbol></varDec><statements><letStatement><keyword>let</keyword><identifier kind="var" type="boolean" is-defined="true" index="1" is-using="true">exit</identifier><symbol>=</symbol><expression><term><keyword>false</keyword></term></expression><symbol>;</symbol></letStatement><whileStatement><keyword>while</keyword><symbol>(</symbol><expression><term><symbol>~</symbol><term><identifier kind="var" type="boolean" is-defined="true" index="1" is-using="true">exit</identifier></term></term></expression><symbol>)</symbol><symbol>{</symbol><statements><whileStatement><keyword>while</keyword><symbol>(</symbol><expression><term><identifier kind="var" type="char" is-defined="true" index="0">key</identifier></term><symbol>=</symbol><term><integerConstant>0</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier><symbol>=</symbol><expression><term><identifier kind="class" is-using="true">Keyboard</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">keyPressed</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier kind="subroutine" type="method" is-using="true">moveSquare</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></whileStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier></term><symbol>=</symbol><term><integerConstant>81</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="boolean" is-defined="true" index="1" is-using="true">exit</identifier><symbol>=</symbol><expression><term><keyword>true</keyword></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier></term><symbol>=</symbol><term><integerConstant>90</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="var" type="Square" index="0" is-using="true">square</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">decSize</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></ifStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier></term><symbol>=</symbol><term><integerConstant>88</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="var" type="Square" index="0" is-using="true">square</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">incSize</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></ifStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier></term><symbol>=</symbol><term><integerConstant>131</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="1" is-using="true">direction</identifier><symbol>=</symbol><expression><term><integerConstant>1</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier></term><symbol>=</symbol><term><integerConstant>133</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="1" is-using="true">direction</identifier><symbol>=</symbol><expression><term><integerConstant>2</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier></term><symbol>=</symbol><term><integerConstant>130</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="1" is-using="true">direction</identifier><symbol>=</symbol><expression><term><integerConstant>3</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier></term><symbol>=</symbol><term><integerConstant>132</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="1" is-using="true">direction</identifier><symbol>=</symbol><expression><term><integerConstant>4</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement><whileStatement><keyword>while</keyword><symbol>(</symbol><expression><term><symbol>~</symbol><term><symbol>(</symbol><expression><term><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier></term><symbol>=</symbol><term><integerConstant>0</integerConstant></term></expression><symbol>)</symbol></term></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier><symbol>=</symbol><expression><term><identifier kind="class" is-using="true">Keyboard</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">keyPressed</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier kind="subroutine" type="method" is-using="true">moveSquare</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></whileStatement></statements><symbol>}</symbol></whileStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><symbol>}</symbol></class>