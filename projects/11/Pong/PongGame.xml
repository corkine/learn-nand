<?xml version="1.0" encoding="UTF-8"?><class><keyword>class</keyword><identifier kind="class" type="PongGame" is-using="true">PongGame</identifier><symbol>{</symbol><classVarDec><keyword>static</keyword><identifier kind="class" type="PongGame">PongGame</identifier><identifier kind="static" type="PongGame" index="0">instance</identifier><symbol>;</symbol></classVarDec><classVarDec><keyword>field</keyword><identifier>Bat</identifier><identifier kind="field" type="Bat" index="0">bat</identifier><symbol>;</symbol></classVarDec><classVarDec><keyword>field</keyword><identifier>Ball</identifier><identifier kind="field" type="Ball" index="1">ball</identifier><symbol>;</symbol></classVarDec><classVarDec><keyword>field</keyword><keyword>int</keyword><identifier kind="field" type="int" index="2">wall</identifier><symbol>;</symbol></classVarDec><classVarDec><keyword>field</keyword><keyword>boolean</keyword><identifier kind="field" type="boolean" index="3">exit</identifier><symbol>;</symbol></classVarDec><classVarDec><keyword>field</keyword><keyword>int</keyword><identifier kind="field" type="int" index="4">score</identifier><symbol>;</symbol></classVarDec><classVarDec><keyword>field</keyword><keyword>int</keyword><identifier kind="field" type="int" index="5">lastWall</identifier><symbol>;</symbol></classVarDec><classVarDec><keyword>field</keyword><keyword>int</keyword><identifier kind="field" type="int" index="6">batWidth</identifier><symbol>;</symbol></classVarDec><subroutineDec><keyword>constructor</keyword><identifier kind="class" type="PongGame">PongGame</identifier><identifier kind="subroutine" type="constructor" is-using="true">new</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">clearScreen</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="6" is-using="true">batWidth</identifier><symbol>=</symbol><expression><term><integerConstant>50</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="Bat" index="0" is-using="true">bat</identifier><symbol>=</symbol><expression><term><identifier is-using="true">Bat</identifier><symbol>.</symbol><identifier kind="subroutine" type="constructor" is-using="true">new</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>230</integerConstant></term></expression><symbol>,</symbol><expression><term><integerConstant>229</integerConstant></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="6" is-using="true">batWidth</identifier></term></expression><symbol>,</symbol><expression><term><integerConstant>7</integerConstant></term></expression></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="Ball" index="1" is-using="true">ball</identifier><symbol>=</symbol><expression><term><identifier is-using="true">Ball</identifier><symbol>.</symbol><identifier kind="subroutine" type="constructor" is-using="true">new</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>253</integerConstant></term></expression><symbol>,</symbol><expression><term><integerConstant>222</integerConstant></term></expression><symbol>,</symbol><expression><term><integerConstant>0</integerConstant></term></expression><symbol>,</symbol><expression><term><integerConstant>511</integerConstant></term></expression><symbol>,</symbol><expression><term><integerConstant>0</integerConstant></term></expression><symbol>,</symbol><expression><term><integerConstant>229</integerConstant></term></expression></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier kind="field" type="Ball" index="1" is-using="true">ball</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setDestination</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>400</integerConstant></term></expression><symbol>,</symbol><expression><term><integerConstant>0</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">drawRectangle</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>0</integerConstant></term></expression><symbol>,</symbol><expression><term><integerConstant>238</integerConstant></term></expression><symbol>,</symbol><expression><term><integerConstant>511</integerConstant></term></expression><symbol>,</symbol><expression><term><integerConstant>240</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">moveCursor</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>22</integerConstant></term></expression><symbol>,</symbol><expression><term><integerConstant>0</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">printString</identifier><symbol>(</symbol><expressionList><expression><term><stringConstant>Score: 0</stringConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><letStatement><keyword>let</keyword><identifier kind="field" type="boolean" index="3" is-using="true">exit</identifier><symbol>=</symbol><expression><term><keyword>false</keyword></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="4" is-using="true">score</identifier><symbol>=</symbol><expression><term><integerConstant>0</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="2" is-using="true">wall</identifier><symbol>=</symbol><expression><term><integerConstant>0</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="5" is-using="true">lastWall</identifier><symbol>=</symbol><expression><term><integerConstant>0</integerConstant></term></expression><symbol>;</symbol></letStatement><returnStatement><keyword>return</keyword><expression><term><keyword>this</keyword></term></expression><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method" is-using="true">dispose</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="field" type="Bat" index="0" is-using="true">bat</identifier><symbol>.</symbol><identifier kind="subroutine" type="method" is-using="true">dispose</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="field" type="Ball" index="1" is-using="true">ball</identifier><symbol>.</symbol><identifier kind="subroutine" type="method" is-using="true">dispose</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier is-using="true">Memory</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">deAlloc</identifier><symbol>(</symbol><expressionList><expression><term><keyword kind="argument" type="PongGame" index="0">this</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>function</keyword><keyword>void</keyword><identifier kind="subroutine" type="function">newInstance</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="static" type="PongGame" index="0" is-using="true">instance</identifier><symbol>=</symbol><expression><term><identifier kind="class" type="PongGame" is-using="true">PongGame</identifier><symbol>.</symbol><identifier kind="subroutine" type="constructor" is-using="true">new</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>function</keyword><identifier kind="class" type="PongGame" is-using="true">PongGame</identifier><identifier kind="subroutine" type="function">getInstance</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><returnStatement><keyword>return</keyword><expression><term><identifier kind="static" type="PongGame" index="0" is-using="true">instance</identifier></term></expression><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method">run</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><varDec><keyword>var</keyword><keyword>char</keyword><identifier kind="var" type="char" is-defined="true" index="0">key</identifier><symbol>;</symbol></varDec><statements><whileStatement><keyword>while</keyword><symbol>(</symbol><expression><term><symbol>~</symbol><term><identifier kind="field" type="boolean" index="3" is-using="true">exit</identifier></term></term></expression><symbol>)</symbol><symbol>{</symbol><statements><whileStatement><keyword>while</keyword><symbol>(</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="var" type="char" is-defined="true" index="0">key</identifier></term><symbol>=</symbol><term><integerConstant>0</integerConstant></term></expression><symbol>)</symbol></term><symbol>&amp;</symbol><term><symbol>(</symbol><expression><term><symbol>~</symbol><term><identifier kind="field" type="boolean" index="3" is-using="true">exit</identifier></term></term></expression><symbol>)</symbol></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier><symbol>=</symbol><expression><term><identifier is-using="true">Keyboard</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">keyPressed</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier kind="field" type="Bat" index="0" is-using="true">bat</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">move</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="subroutine" is-using="true">moveBall</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier is-using="true">Sys</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">wait</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>50</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></whileStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier></term><symbol>=</symbol><term><integerConstant>130</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="field" type="Bat" index="0" is-using="true">bat</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setDirection</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>1</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier></term><symbol>=</symbol><term><integerConstant>132</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="field" type="Bat" index="0" is-using="true">bat</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setDirection</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>2</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier></term><symbol>=</symbol><term><integerConstant>140</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="boolean" index="3" is-using="true">exit</identifier><symbol>=</symbol><expression><term><keyword>true</keyword></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement></statements><symbol>}</symbol></ifStatement></statements><symbol>}</symbol></ifStatement><whileStatement><keyword>while</keyword><symbol>(</symbol><expression><term><symbol>(</symbol><expression><term><symbol>~</symbol><term><symbol>(</symbol><expression><term><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier></term><symbol>=</symbol><term><integerConstant>0</integerConstant></term></expression><symbol>)</symbol></term></term></expression><symbol>)</symbol></term><symbol>&amp;</symbol><term><symbol>(</symbol><expression><term><symbol>~</symbol><term><identifier kind="field" type="boolean" index="3" is-using="true">exit</identifier></term></term></expression><symbol>)</symbol></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="char" is-defined="true" index="0" is-using="true">key</identifier><symbol>=</symbol><expression><term><identifier is-using="true">Keyboard</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">keyPressed</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier kind="field" type="Bat" index="0" is-using="true">bat</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">move</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="subroutine" is-using="true">moveBall</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier is-using="true">Sys</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">wait</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>50</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></whileStatement></statements><symbol>}</symbol></whileStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="boolean" index="3" is-using="true">exit</identifier></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">moveCursor</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>10</integerConstant></term></expression><symbol>,</symbol><expression><term><integerConstant>27</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">printString</identifier><symbol>(</symbol><expressionList><expression><term><stringConstant>Game Over</stringConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></ifStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" is-using="true" type="method">moveBall</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><varDec><keyword>var</keyword><keyword>int</keyword><identifier kind="var" type="int" is-defined="true" index="0">bouncingDirection</identifier><identifier kind="var" type="int" is-defined="true" index="1">batLeft</identifier><identifier kind="var" type="int" is-defined="true" index="2">batRight</identifier><identifier kind="var" type="int" is-defined="true" index="3">ballLeft</identifier><identifier kind="var" type="int" is-defined="true" index="4">ballRight</identifier><symbol>;</symbol></varDec><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="2" is-using="true">wall</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="Ball" index="1" is-using="true">ball</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">move</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="2" is-using="true">wall</identifier></term><symbol>&gt;</symbol><term><integerConstant>0</integerConstant></term></expression><symbol>)</symbol></term><symbol>&amp;</symbol><term><symbol>(</symbol><expression><term><symbol>~</symbol><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="2" is-using="true">wall</identifier></term><symbol>=</symbol><term><identifier kind="field" type="int" index="5" is-using="true">lastWall</identifier></term></expression><symbol>)</symbol></term></term></expression><symbol>)</symbol></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="5" is-using="true">lastWall</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="2" is-using="true">wall</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">bouncingDirection</identifier><symbol>=</symbol><expression><term><integerConstant>0</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">batLeft</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="Bat" index="0" is-using="true">bat</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">getLeft</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="2" is-using="true">batRight</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="Bat" index="0" is-using="true">bat</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">getRight</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="3" is-using="true">ballLeft</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="Ball" index="1" is-using="true">ball</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">getLeft</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="4" is-using="true">ballRight</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="Ball" index="1" is-using="true">ball</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">getRight</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="2" is-using="true">wall</identifier></term><symbol>=</symbol><term><integerConstant>4</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="boolean" index="3" is-using="true">exit</identifier><symbol>=</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">batLeft</identifier></term><symbol>&gt;</symbol><term><identifier kind="var" type="int" is-defined="true" index="4" is-using="true">ballRight</identifier></term></expression><symbol>)</symbol></term><symbol>|</symbol><term><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="2" is-using="true">batRight</identifier></term><symbol>&lt;</symbol><term><identifier kind="var" type="int" is-defined="true" index="3" is-using="true">ballLeft</identifier></term></expression><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><symbol>~</symbol><term><identifier kind="field" type="boolean" index="3" is-using="true">exit</identifier></term></term></expression><symbol>)</symbol><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="4" is-using="true">ballRight</identifier></term><symbol>&lt;</symbol><term><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">batLeft</identifier></term><symbol>+</symbol><term><integerConstant>10</integerConstant></term></expression><symbol>)</symbol></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">bouncingDirection</identifier><symbol>=</symbol><expression><term><symbol>-</symbol><term><integerConstant>1</integerConstant></term></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="3" is-using="true">ballLeft</identifier></term><symbol>&gt;</symbol><term><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="2" is-using="true">batRight</identifier></term><symbol>-</symbol><term><integerConstant>10</integerConstant></term></expression><symbol>)</symbol></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">bouncingDirection</identifier><symbol>=</symbol><expression><term><integerConstant>1</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement></statements><symbol>}</symbol></ifStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="6" is-using="true">batWidth</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="6" is-using="true">batWidth</identifier></term><symbol>-</symbol><term><integerConstant>2</integerConstant></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier kind="field" type="Bat" index="0" is-using="true">bat</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setWidth</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="field" type="int" index="6" is-using="true">batWidth</identifier></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="4" is-using="true">score</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="4" is-using="true">score</identifier></term><symbol>+</symbol><term><integerConstant>1</integerConstant></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">moveCursor</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>22</integerConstant></term></expression><symbol>,</symbol><expression><term><integerConstant>7</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">printInt</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="field" type="int" index="4" is-using="true">score</identifier></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></ifStatement></statements><symbol>}</symbol></ifStatement><doStatement><keyword>do</keyword><identifier kind="field" type="Ball" index="1" is-using="true">ball</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">bounce</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">bouncingDirection</identifier></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol></ifStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><symbol>}</symbol></class>