<?xml version="1.0" encoding="UTF-8"?><class><keyword>class</keyword><identifier kind="class" type="Ball">Ball</identifier><symbol>{</symbol><classVarDec><keyword>field</keyword><keyword>int</keyword><identifier kind="field" type="int" index="0">x</identifier><identifier kind="field" type="int" index="1">y</identifier><symbol>;</symbol></classVarDec><classVarDec><keyword>field</keyword><keyword>int</keyword><identifier kind="field" type="int" index="2">lengthx</identifier><identifier kind="field" type="int" index="3">lengthy</identifier><symbol>;</symbol></classVarDec><classVarDec><keyword>field</keyword><keyword>int</keyword><identifier kind="field" type="int" index="4">d</identifier><identifier kind="field" type="int" index="5">straightD</identifier><identifier kind="field" type="int" index="6">diagonalD</identifier><symbol>;</symbol></classVarDec><classVarDec><keyword>field</keyword><keyword>boolean</keyword><identifier kind="field" type="boolean" index="7">invert</identifier><identifier kind="field" type="boolean" index="8">positivex</identifier><identifier kind="field" type="boolean" index="9">positivey</identifier><symbol>;</symbol></classVarDec><classVarDec><keyword>field</keyword><keyword>int</keyword><identifier kind="field" type="int" index="10">leftWall</identifier><identifier kind="field" type="int" index="11">rightWall</identifier><identifier kind="field" type="int" index="12">topWall</identifier><identifier kind="field" type="int" index="13">bottomWall</identifier><symbol>;</symbol></classVarDec><classVarDec><keyword>field</keyword><keyword>int</keyword><identifier kind="field" type="int" index="14">wall</identifier><symbol>;</symbol></classVarDec><subroutineDec><keyword>constructor</keyword><identifier kind="class" type="Ball">Ball</identifier><identifier kind="subroutine" type="constructor">new</identifier><symbol>(</symbol><parameterList><keyword>int</keyword><identifier kind="argument" type="int" index="0">Ax</identifier><symbol>,</symbol><keyword>int</keyword><identifier>Ay</identifier><symbol>,</symbol><keyword>int</keyword><identifier>AleftWall</identifier><symbol>,</symbol><keyword>int</keyword><identifier>ArightWall</identifier><symbol>,</symbol><keyword>int</keyword><identifier>AtopWall</identifier><symbol>,</symbol><keyword>int</keyword><identifier>AbottomWall</identifier></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="0" is-using="true">x</identifier><symbol>=</symbol><expression><term><identifier kind="argument" type="int" index="0">Ax</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="1" is-using="true">y</identifier><symbol>=</symbol><expression><term><identifier kind="argument" type="int" index="1">Ay</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="10" is-using="true">leftWall</identifier><symbol>=</symbol><expression><term><identifier kind="argument" type="int" index="2">AleftWall</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="11" is-using="true">rightWall</identifier><symbol>=</symbol><expression><term><identifier kind="argument" type="int" index="3">ArightWall</identifier></term><symbol>-</symbol><term><integerConstant>6</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="12" is-using="true">topWall</identifier><symbol>=</symbol><expression><term><identifier kind="argument" type="int" index="4">AtopWall</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="13" is-using="true">bottomWall</identifier><symbol>=</symbol><expression><term><identifier kind="argument" type="int" index="5">AbottomWall</identifier></term><symbol>-</symbol><term><integerConstant>6</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="14" is-using="true">wall</identifier><symbol>=</symbol><expression><term><integerConstant>0</integerConstant></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier kind="subroutine" is-using="true">show</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><returnStatement><keyword>return</keyword><expression><term><keyword>this</keyword></term></expression><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method">dispose</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Memory</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">deAlloc</identifier><symbol>(</symbol><expressionList><expression><term><keyword kind="argument" type="Ball" index="0">this</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" is-using="true" type="method">show</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setColor</identifier><symbol>(</symbol><expressionList><expression><term><keyword>true</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="subroutine" is-using="true">draw</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method">hide</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">setColor</identifier><symbol>(</symbol><expressionList><expression><term><keyword>false</keyword></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="subroutine" is-using="true">draw</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" is-using="true" type="method">draw</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Screen</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">drawRectangle</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><integerConstant>5</integerConstant></term></expression><symbol>,</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><integerConstant>5</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>int</keyword><identifier kind="subroutine" type="method">getLeft</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><returnStatement><keyword>return</keyword><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term></expression><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>int</keyword><identifier kind="subroutine" type="method">getRight</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><returnStatement><keyword>return</keyword><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><integerConstant>5</integerConstant></term></expression><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method">setDestination</identifier><symbol>(</symbol><parameterList><keyword>int</keyword><identifier kind="argument" type="int" index="1">destx</identifier><symbol>,</symbol><keyword>int</keyword><identifier>desty</identifier></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><varDec><keyword>var</keyword><keyword>int</keyword><identifier kind="var" type="int" is-defined="true" index="0">dx</identifier><identifier kind="var" type="int" is-defined="true" index="1">dy</identifier><identifier kind="var" type="int" is-defined="true" index="2">temp</identifier><symbol>;</symbol></varDec><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="2" is-using="true">lengthx</identifier><symbol>=</symbol><expression><term><identifier kind="argument" type="int" index="1">destx</identifier></term><symbol>-</symbol><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="3" is-using="true">lengthy</identifier><symbol>=</symbol><expression><term><identifier kind="argument" type="int" index="2">desty</identifier></term><symbol>-</symbol><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">dx</identifier><symbol>=</symbol><expression><term><identifier kind="class" is-using="true">Math</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">abs</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="field" type="int" index="2" is-using="true">lengthx</identifier></term></expression></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">dy</identifier><symbol>=</symbol><expression><term><identifier kind="class" is-using="true">Math</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">abs</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="field" type="int" index="3" is-using="true">lengthy</identifier></term></expression></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="boolean" index="7" is-using="true">invert</identifier><symbol>=</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">dx</identifier></term><symbol>&lt;</symbol><term><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">dy</identifier></term></expression><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="boolean" index="7" is-using="true">invert</identifier></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="2" is-using="true">temp</identifier><symbol>=</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">dx</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">dx</identifier><symbol>=</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">dy</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">dy</identifier><symbol>=</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="2" is-using="true">temp</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="boolean" index="8" is-using="true">positivex</identifier><symbol>=</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>&lt;</symbol><term><identifier kind="argument" type="int" index="2" is-using="true">desty</identifier></term></expression><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="boolean" index="9" is-using="true">positivey</identifier><symbol>=</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>&lt;</symbol><term><identifier kind="argument" type="int" index="1" is-using="true">destx</identifier></term></expression><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="boolean" index="8" is-using="true">positivex</identifier><symbol>=</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>&lt;</symbol><term><identifier kind="argument" type="int" index="1" is-using="true">destx</identifier></term></expression><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="boolean" index="9" is-using="true">positivey</identifier><symbol>=</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>&lt;</symbol><term><identifier kind="argument" type="int" index="2" is-using="true">desty</identifier></term></expression><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="4" is-using="true">d</identifier><symbol>=</symbol><expression><term><symbol>(</symbol><expression><term><integerConstant>2</integerConstant></term><symbol>*</symbol><term><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">dy</identifier></term></expression><symbol>)</symbol></term><symbol>-</symbol><term><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">dx</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="5" is-using="true">straightD</identifier><symbol>=</symbol><expression><term><integerConstant>2</integerConstant></term><symbol>*</symbol><term><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">dy</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="6" is-using="true">diagonalD</identifier><symbol>=</symbol><expression><term><integerConstant>2</integerConstant></term><symbol>*</symbol><term><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">dy</identifier></term><symbol>-</symbol><term><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">dx</identifier></term></expression><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>int</keyword><identifier kind="subroutine" type="method">move</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="subroutine" type="method" is-using="true">hide</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="4" is-using="true">d</identifier></term><symbol>&lt;</symbol><term><integerConstant>0</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="4" is-using="true">d</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="4" is-using="true">d</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="5" is-using="true">straightD</identifier></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="4" is-using="true">d</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="4" is-using="true">d</identifier></term><symbol>+</symbol><term><identifier kind="field" type="int" index="6" is-using="true">diagonalD</identifier></term></expression><symbol>;</symbol></letStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="boolean" index="9" is-using="true">positivey</identifier></term></expression><symbol>)</symbol><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="boolean" index="7" is-using="true">invert</identifier></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="0" is-using="true">x</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><integerConstant>4</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="1" is-using="true">y</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><integerConstant>4</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="boolean" index="7" is-using="true">invert</identifier></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="0" is-using="true">x</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>-</symbol><term><integerConstant>4</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="1" is-using="true">y</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>-</symbol><term><integerConstant>4</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement></statements><symbol>}</symbol></ifStatement></statements><symbol>}</symbol></ifStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="boolean" index="8" is-using="true">positivex</identifier></term></expression><symbol>)</symbol><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="boolean" index="7" is-using="true">invert</identifier></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="1" is-using="true">y</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><integerConstant>4</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="0" is-using="true">x</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><integerConstant>4</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="boolean" index="7" is-using="true">invert</identifier></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="1" is-using="true">y</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>-</symbol><term><integerConstant>4</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="0" is-using="true">x</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>-</symbol><term><integerConstant>4</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement></statements><symbol>}</symbol></ifStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><symbol>~</symbol><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>&gt;</symbol><term><identifier kind="field" type="int" index="10" is-using="true">leftWall</identifier></term></expression><symbol>)</symbol></term></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="14" is-using="true">wall</identifier><symbol>=</symbol><expression><term><integerConstant>1</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="0" is-using="true">x</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="10" is-using="true">leftWall</identifier></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><symbol>~</symbol><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>&lt;</symbol><term><identifier kind="field" type="int" index="11" is-using="true">rightWall</identifier></term></expression><symbol>)</symbol></term></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="14" is-using="true">wall</identifier><symbol>=</symbol><expression><term><integerConstant>2</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="0" is-using="true">x</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="11" is-using="true">rightWall</identifier></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><symbol>~</symbol><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>&gt;</symbol><term><identifier kind="field" type="int" index="12" is-using="true">topWall</identifier></term></expression><symbol>)</symbol></term></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="14" is-using="true">wall</identifier><symbol>=</symbol><expression><term><integerConstant>3</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="1" is-using="true">y</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="12" is-using="true">topWall</identifier></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><symbol>~</symbol><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>&lt;</symbol><term><identifier kind="field" type="int" index="13" is-using="true">bottomWall</identifier></term></expression><symbol>)</symbol></term></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="14" is-using="true">wall</identifier><symbol>=</symbol><expression><term><integerConstant>4</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="field" type="int" index="1" is-using="true">y</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="13" is-using="true">bottomWall</identifier></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement><doStatement><keyword>do</keyword><identifier kind="subroutine" is-using="true" type="method">show</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><returnStatement><keyword>return</keyword><expression><term><identifier kind="field" type="int" index="14" is-using="true">wall</identifier></term></expression><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>method</keyword><keyword>void</keyword><identifier kind="subroutine" type="method">bounce</identifier><symbol>(</symbol><parameterList><keyword>int</keyword><identifier kind="argument" type="int" index="1">bouncingDirection</identifier></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><varDec><keyword>var</keyword><keyword>int</keyword><identifier kind="var" type="int" is-defined="true" index="0">newx</identifier><identifier kind="var" type="int" is-defined="true" index="1">newy</identifier><identifier kind="var" type="int" is-defined="true" index="2">divLengthx</identifier><identifier kind="var" type="int" is-defined="true" index="3">divLengthy</identifier><identifier kind="var" type="int" is-defined="true" index="4">factor</identifier><symbol>;</symbol></varDec><statements><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="2" is-using="true">divLengthx</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="2" is-using="true">lengthx</identifier></term><symbol>/</symbol><term><integerConstant>10</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="3" is-using="true">divLengthy</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="3" is-using="true">lengthy</identifier></term><symbol>/</symbol><term><integerConstant>10</integerConstant></term></expression><symbol>;</symbol></letStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="argument" type="int" index="1">bouncingDirection</identifier></term><symbol>=</symbol><term><integerConstant>0</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="4" is-using="true">factor</identifier><symbol>=</symbol><expression><term><integerConstant>10</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><symbol>(</symbol><expression><term><symbol>(</symbol><expression><term><symbol>~</symbol><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="2" is-using="true">lengthx</identifier></term><symbol>&lt;</symbol><term><integerConstant>0</integerConstant></term></expression><symbol>)</symbol></term></term></expression><symbol>)</symbol></term><symbol>&amp;</symbol><term><symbol>(</symbol><expression><term><identifier kind="argument" type="int" index="1" is-using="true">bouncingDirection</identifier></term><symbol>=</symbol><term><integerConstant>1</integerConstant></term></expression><symbol>)</symbol></term></expression><symbol>)</symbol></term><symbol>|</symbol><term><symbol>(</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="2" is-using="true">lengthx</identifier></term><symbol>&lt;</symbol><term><integerConstant>0</integerConstant></term></expression><symbol>)</symbol></term><symbol>&amp;</symbol><term><symbol>(</symbol><expression><term><identifier kind="argument" type="int" index="1" is-using="true">bouncingDirection</identifier></term><symbol>=</symbol><term><symbol>(</symbol><expression><term><symbol>-</symbol><term><integerConstant>1</integerConstant></term></term></expression><symbol>)</symbol></term></expression><symbol>)</symbol></term></expression><symbol>)</symbol></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="4" is-using="true">factor</identifier><symbol>=</symbol><expression><term><integerConstant>20</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="4" is-using="true">factor</identifier><symbol>=</symbol><expression><term><integerConstant>5</integerConstant></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement></statements><symbol>}</symbol></ifStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="14" is-using="true">wall</identifier></term><symbol>=</symbol><term><integerConstant>1</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">newx</identifier><symbol>=</symbol><expression><term><integerConstant>506</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">newy</identifier><symbol>=</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="3" is-using="true">divLengthy</identifier></term><symbol>*</symbol><term><symbol>(</symbol><expression><term><symbol>-</symbol><term><integerConstant>50</integerConstant></term></term></expression><symbol>)</symbol></term></expression><symbol>)</symbol></term><symbol>/</symbol><term><identifier kind="var" type="int" is-defined="true" index="2" is-using="true">divLengthx</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">newy</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">newy</identifier></term><symbol>*</symbol><term><identifier kind="var" type="int" is-defined="true" index="4" is-using="true">factor</identifier></term></expression><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="14" is-using="true">wall</identifier></term><symbol>=</symbol><term><integerConstant>2</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">newx</identifier><symbol>=</symbol><expression><term><integerConstant>0</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">newy</identifier><symbol>=</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="3" is-using="true">divLengthy</identifier></term><symbol>*</symbol><term><integerConstant>50</integerConstant></term></expression><symbol>)</symbol></term><symbol>/</symbol><term><identifier kind="var" type="int" is-defined="true" index="2" is-using="true">divLengthx</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">newy</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="1" is-using="true">y</identifier></term><symbol>+</symbol><term><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">newy</identifier></term><symbol>*</symbol><term><identifier kind="var" type="int" is-defined="true" index="4" is-using="true">factor</identifier></term></expression><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="field" type="int" index="14" is-using="true">wall</identifier></term><symbol>=</symbol><term><integerConstant>3</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">newy</identifier><symbol>=</symbol><expression><term><integerConstant>250</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">newx</identifier><symbol>=</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="2" is-using="true">divLengthx</identifier></term><symbol>*</symbol><term><symbol>(</symbol><expression><term><symbol>-</symbol><term><integerConstant>25</integerConstant></term></term></expression><symbol>)</symbol></term></expression><symbol>)</symbol></term><symbol>/</symbol><term><identifier kind="var" type="int" is-defined="true" index="3" is-using="true">divLengthy</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">newx</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">newx</identifier></term><symbol>*</symbol><term><identifier kind="var" type="int" is-defined="true" index="4" is-using="true">factor</identifier></term></expression><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">newy</identifier><symbol>=</symbol><expression><term><integerConstant>0</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">newx</identifier><symbol>=</symbol><expression><term><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="2" is-using="true">divLengthx</identifier></term><symbol>*</symbol><term><integerConstant>25</integerConstant></term></expression><symbol>)</symbol></term><symbol>/</symbol><term><identifier kind="var" type="int" is-defined="true" index="3" is-using="true">divLengthy</identifier></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">newx</identifier><symbol>=</symbol><expression><term><identifier kind="field" type="int" index="0" is-using="true">x</identifier></term><symbol>+</symbol><term><symbol>(</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">newx</identifier></term><symbol>*</symbol><term><identifier kind="var" type="int" is-defined="true" index="4" is-using="true">factor</identifier></term></expression><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement></statements><symbol>}</symbol></ifStatement></statements><symbol>}</symbol></ifStatement><doStatement><keyword>do</keyword><identifier kind="subroutine" type="method" is-using="true">setDestination</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="var" type="int" is-defined="true" index="0" is-using="true">newx</identifier></term></expression><symbol>,</symbol><expression><term><identifier kind="var" type="int" is-defined="true" index="1" is-using="true">newy</identifier></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><symbol>}</symbol></class>