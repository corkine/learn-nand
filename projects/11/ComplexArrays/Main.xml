<?xml version="1.0" encoding="UTF-8"?><class><keyword>class</keyword><identifier kind="class" type="Main">Main</identifier><symbol>{</symbol><subroutineDec><keyword>function</keyword><keyword>void</keyword><identifier kind="subroutine" type="function">main</identifier><symbol>(</symbol><parameterList></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><varDec><keyword>var</keyword><identifier kind="class" type="Array">Array</identifier><identifier kind="var" type="Array" is-defined="true" index="0">a</identifier><identifier kind="var" type="Array" is-defined="true" index="1">b</identifier><identifier kind="var" type="Array" is-defined="true" index="2">c</identifier><symbol>;</symbol></varDec><statements><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>=</symbol><expression><term><identifier kind="class" type="Array" is-using="true">Array</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">new</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>10</integerConstant></term></expression></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="1" is-using="true">b</identifier><symbol>=</symbol><expression><term><identifier kind="class" type="Array" is-using="true">Array</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">new</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>5</integerConstant></term></expression></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="2" is-using="true">c</identifier><symbol>=</symbol><expression><term><identifier kind="class" type="Array" is-using="true">Array</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">new</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>1</integerConstant></term></expression></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><integerConstant>3</integerConstant></term></expression><symbol>]</symbol><symbol>=</symbol><expression><term><integerConstant>2</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><integerConstant>4</integerConstant></term></expression><symbol>]</symbol><symbol>=</symbol><expression><term><integerConstant>8</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><integerConstant>5</integerConstant></term></expression><symbol>]</symbol><symbol>=</symbol><expression><term><integerConstant>4</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="1" is-using="true">b</identifier><symbol>[</symbol><expression><term><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><integerConstant>3</integerConstant></term></expression><symbol>]</symbol></term></expression><symbol>]</symbol><symbol>=</symbol><expression><term><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><integerConstant>3</integerConstant></term></expression><symbol>]</symbol></term><symbol>+</symbol><term><integerConstant>3</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><identifier kind="var" type="Array" is-defined="true" index="1" is-using="true">b</identifier><symbol>[</symbol><expression><term><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><integerConstant>3</integerConstant></term></expression><symbol>]</symbol></term></expression><symbol>]</symbol></term></expression><symbol>]</symbol><symbol>=</symbol><expression><term><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><integerConstant>5</integerConstant></term></expression><symbol>]</symbol></term></expression><symbol>]</symbol></term><symbol>*</symbol><term><identifier kind="var" type="Array" is-defined="true" index="1" is-using="true">b</identifier><symbol>[</symbol><expression><term><symbol>(</symbol><expression><term><symbol>(</symbol><expression><term><integerConstant>7</integerConstant></term><symbol>-</symbol><term><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><integerConstant>3</integerConstant></term></expression><symbol>]</symbol></term></expression><symbol>)</symbol></term><symbol>-</symbol><term><identifier kind="class" is-using="true">Main</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">double</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>2</integerConstant></term></expression></expressionList><symbol>)</symbol></term></expression><symbol>)</symbol></term><symbol>+</symbol><term><integerConstant>1</integerConstant></term></expression><symbol>]</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="2" is-using="true">c</identifier><symbol>[</symbol><expression><term><integerConstant>0</integerConstant></term></expression><symbol>]</symbol><symbol>=</symbol><expression><term><keyword>null</keyword></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="2" is-using="true">c</identifier><symbol>=</symbol><expression><term><identifier kind="var" type="Array" is-defined="true" index="2" is-using="true">c</identifier><symbol>[</symbol><expression><term><integerConstant>0</integerConstant></term></expression><symbol>]</symbol></term></expression><symbol>;</symbol></letStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">printString</identifier><symbol>(</symbol><expressionList><expression><term><stringConstant>Test 1: expected result: 5; actual result: </stringConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">printInt</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="var" type="Array" is-defined="true" index="1" is-using="true">b</identifier><symbol>[</symbol><expression><term><integerConstant>2</integerConstant></term></expression><symbol>]</symbol></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">println</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">printString</identifier><symbol>(</symbol><expressionList><expression><term><stringConstant>Test 2: expected result: 40; actual result: </stringConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">printInt</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><integerConstant>5</integerConstant></term></expression><symbol>]</symbol></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">println</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">printString</identifier><symbol>(</symbol><expressionList><expression><term><stringConstant>Test 3: expected result: 0; actual result: </stringConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">printInt</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="var" type="Array" is-defined="true" index="2" is-using="true">c</identifier></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">println</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="2" is-using="true">c</identifier><symbol>=</symbol><expression><term><keyword>null</keyword></term></expression><symbol>;</symbol></letStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><identifier kind="var" type="Array" is-defined="true" index="2" is-using="true">c</identifier></term><symbol>=</symbol><term><keyword>null</keyword></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Main</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">fill</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier></term></expression><symbol>,</symbol><expression><term><integerConstant>10</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="2" is-using="true">c</identifier><symbol>=</symbol><expression><term><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><integerConstant>3</integerConstant></term></expression><symbol>]</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="2" is-using="true">c</identifier><symbol>[</symbol><expression><term><integerConstant>1</integerConstant></term></expression><symbol>]</symbol><symbol>=</symbol><expression><term><integerConstant>33</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="2" is-using="true">c</identifier><symbol>=</symbol><expression><term><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><integerConstant>7</integerConstant></term></expression><symbol>]</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="2" is-using="true">c</identifier><symbol>[</symbol><expression><term><integerConstant>1</integerConstant></term></expression><symbol>]</symbol><symbol>=</symbol><expression><term><integerConstant>77</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="1" is-using="true">b</identifier><symbol>=</symbol><expression><term><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><integerConstant>3</integerConstant></term></expression><symbol>]</symbol></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="1" is-using="true">b</identifier><symbol>[</symbol><expression><term><integerConstant>1</integerConstant></term></expression><symbol>]</symbol><symbol>=</symbol><expression><term><identifier kind="var" type="Array" is-defined="true" index="1" is-using="true">b</identifier><symbol>[</symbol><expression><term><integerConstant>1</integerConstant></term></expression><symbol>]</symbol></term><symbol>+</symbol><term><identifier kind="var" type="Array" is-defined="true" index="2" is-using="true">c</identifier><symbol>[</symbol><expression><term><integerConstant>1</integerConstant></term></expression><symbol>]</symbol></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="var" type="Array" is-defined="true" index="2" is-using="true">c</identifier><symbol>=</symbol><expression><term><identifier kind="var" type="Array" is-defined="true" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><integerConstant>4</integerConstant></term></expression><symbol>]</symbol></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">printString</identifier><symbol>(</symbol><expressionList><expression><term><stringConstant>Test 4: expected result: 77; actual result: </stringConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">printInt</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="var" type="Array" is-defined="true" index="2" is-using="true">c</identifier><symbol>[</symbol><expression><term><integerConstant>1</integerConstant></term></expression><symbol>]</symbol></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">println</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">printString</identifier><symbol>(</symbol><expressionList><expression><term><stringConstant>Test 5: expected result: 110; actual result: </stringConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">printInt</identifier><symbol>(</symbol><expressionList><expression><term><identifier kind="var" type="Array" is-defined="true" index="1" is-using="true">b</identifier><symbol>[</symbol><expression><term><integerConstant>1</integerConstant></term></expression><symbol>]</symbol></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><doStatement><keyword>do</keyword><identifier kind="class" is-using="true">Output</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">println</identifier><symbol>(</symbol><expressionList></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>function</keyword><keyword>int</keyword><identifier kind="subroutine" type="function">double</identifier><symbol>(</symbol><parameterList><keyword>int</keyword><identifier kind="argument" type="int" index="0">a</identifier></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><returnStatement><keyword>return</keyword><expression><term><identifier kind="argument" type="int" index="0">a</identifier></term><symbol>*</symbol><term><integerConstant>2</integerConstant></term></expression><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><subroutineDec><keyword>function</keyword><keyword>void</keyword><identifier kind="subroutine" type="function">fill</identifier><symbol>(</symbol><parameterList><identifier>Array</identifier><identifier kind="argument" type="Array" index="0">a</identifier><symbol>,</symbol><keyword>int</keyword><identifier>size</identifier></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><statements><whileStatement><keyword>while</keyword><symbol>(</symbol><expression><term><identifier kind="argument" type="int" index="1">size</identifier></term><symbol>&gt;</symbol><term><integerConstant>0</integerConstant></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier kind="argument" type="int" index="1" is-using="true">size</identifier><symbol>=</symbol><expression><term><identifier kind="argument" type="int" index="1" is-using="true">size</identifier></term><symbol>-</symbol><term><integerConstant>1</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier kind="argument" type="Array" index="0" is-using="true">a</identifier><symbol>[</symbol><expression><term><identifier kind="argument" type="int" index="1" is-using="true">size</identifier></term></expression><symbol>]</symbol><symbol>=</symbol><expression><term><identifier kind="class" is-using="true">Array</identifier><symbol>.</symbol><identifier kind="subroutine" is-using="true">new</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>3</integerConstant></term></expression></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></whileStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><symbol>}</symbol></class>